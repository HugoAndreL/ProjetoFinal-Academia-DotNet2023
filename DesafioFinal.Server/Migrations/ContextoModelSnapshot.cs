// <auto-generated />
using System;
using DesafioFinal.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DesafioFinal.Server.Migrations
{
    [DbContext(typeof(Contexto))]
    partial class ContextoModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DesafioFinal.Server.Models.Consultorio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Sala")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Consultorios");
                });

            modelBuilder.Entity("DesafioFinal.Server.Models.Guiche", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Guiches");
                });

            modelBuilder.Entity("DesafioFinal.Server.Models.Historico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("Id");

                    b.ToTable("Historico");
                });

            modelBuilder.Entity("DesafioFinal.Server.Models.Login", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Logins");
                });

            modelBuilder.Entity("DesafioFinal.Server.Models.Senhas", b =>
                {
                    b.Property<int>("Senha")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Senha"), 1L, 1);

                    b.Property<int?>("HistoricoId")
                        .HasColumnType("int");

                    b.HasKey("Senha");

                    b.HasIndex("HistoricoId");

                    b.ToTable("Senhas");
                });

            modelBuilder.Entity("DesafioFinal.Server.Models.SenhasConsultorios", b =>
                {
                    b.Property<int>("SenhaId")
                        .HasColumnType("int");

                    b.Property<int>("ConsultorioId")
                        .HasColumnType("int");

                    b.HasKey("SenhaId", "ConsultorioId");

                    b.HasIndex("ConsultorioId");

                    b.ToTable("SenhasConsultorios");
                });

            modelBuilder.Entity("DesafioFinal.Server.Models.SenhasGuiches", b =>
                {
                    b.Property<int>("SenhaId")
                        .HasColumnType("int");

                    b.Property<int>("GuicheId")
                        .HasColumnType("int");

                    b.HasKey("SenhaId", "GuicheId");

                    b.HasIndex("GuicheId");

                    b.ToTable("SenhasGuiches");
                });

            modelBuilder.Entity("DesafioFinal.Server.Models.SenhasTriagem", b =>
                {
                    b.Property<int>("SenhaId")
                        .HasColumnType("int");

                    b.Property<int>("TriagemId")
                        .HasColumnType("int");

                    b.HasKey("SenhaId", "TriagemId");

                    b.HasIndex("TriagemId");

                    b.ToTable("SenhasTriagens");
                });

            modelBuilder.Entity("DesafioFinal.Server.Models.Triagem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Sala")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Triagens");
                });

            modelBuilder.Entity("DesafioFinal.Server.Models.Senhas", b =>
                {
                    b.HasOne("DesafioFinal.Server.Models.Historico", "Historico")
                        .WithMany("SenhasHistorico")
                        .HasForeignKey("HistoricoId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("Historico");
                });

            modelBuilder.Entity("DesafioFinal.Server.Models.SenhasConsultorios", b =>
                {
                    b.HasOne("DesafioFinal.Server.Models.Consultorio", "Consultorio")
                        .WithMany("SenhasConsultorios")
                        .HasForeignKey("ConsultorioId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("DesafioFinal.Server.Models.Senhas", "Senha")
                        .WithMany("SenhasConsultorios")
                        .HasForeignKey("SenhaId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Consultorio");

                    b.Navigation("Senha");
                });

            modelBuilder.Entity("DesafioFinal.Server.Models.SenhasGuiches", b =>
                {
                    b.HasOne("DesafioFinal.Server.Models.Guiche", "Guiche")
                        .WithMany("SenhasGuiches")
                        .HasForeignKey("GuicheId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("DesafioFinal.Server.Models.Senhas", "Senha")
                        .WithMany("SenhasGuiches")
                        .HasForeignKey("SenhaId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Guiche");

                    b.Navigation("Senha");
                });

            modelBuilder.Entity("DesafioFinal.Server.Models.SenhasTriagem", b =>
                {
                    b.HasOne("DesafioFinal.Server.Models.Senhas", "Senha")
                        .WithMany("SenhasTriagem")
                        .HasForeignKey("SenhaId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("DesafioFinal.Server.Models.Triagem", "Triagem")
                        .WithMany("SenhasTriagem")
                        .HasForeignKey("TriagemId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Senha");

                    b.Navigation("Triagem");
                });

            modelBuilder.Entity("DesafioFinal.Server.Models.Consultorio", b =>
                {
                    b.Navigation("SenhasConsultorios");
                });

            modelBuilder.Entity("DesafioFinal.Server.Models.Guiche", b =>
                {
                    b.Navigation("SenhasGuiches");
                });

            modelBuilder.Entity("DesafioFinal.Server.Models.Historico", b =>
                {
                    b.Navigation("SenhasHistorico");
                });

            modelBuilder.Entity("DesafioFinal.Server.Models.Senhas", b =>
                {
                    b.Navigation("SenhasConsultorios");

                    b.Navigation("SenhasGuiches");

                    b.Navigation("SenhasTriagem");
                });

            modelBuilder.Entity("DesafioFinal.Server.Models.Triagem", b =>
                {
                    b.Navigation("SenhasTriagem");
                });
#pragma warning restore 612, 618
        }
    }
}
